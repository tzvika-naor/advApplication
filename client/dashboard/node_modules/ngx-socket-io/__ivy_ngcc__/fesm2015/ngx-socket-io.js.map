{"version":3,"file":"ngx-socket-io.js","sources":["ngx-socket-io/src/socket-io.service.ts","ngx-socket-io/src/socket-io.module.ts"],"names":["io.default"],"mappings":"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","sourcesContent":["import { Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { share } from 'rxjs/operators';\r\n\r\nimport * as io from 'socket.io-client';\r\n\r\nimport { SocketIoConfig } from './config/socket-io.config';\r\n\r\nexport class WrappedSocket {\r\n    subscribersCounter: Record<string, number> = {};\r\n    eventObservables$: Record<string, Observable<any>> = {};\r\n    ioSocket: any;\r\n    emptyConfig: SocketIoConfig = {\r\n        url: '',\r\n        options: {}\r\n    };\r\n\r\n    constructor(private config: SocketIoConfig) {\r\n        if (config === undefined) {\r\n            config = this.emptyConfig;\r\n        }\r\n        const url: string = config.url;\r\n        const options: any = config.options;\r\n        const ioFunc = (io as any).default ? (io as any).default : io;\r\n        this.ioSocket = ioFunc(url, options);\r\n    }\r\n\r\n    of(namespace: string) {\r\n        this.ioSocket.of(namespace);\r\n    }\r\n\r\n    on(eventName: string, callback: Function) {\r\n        this.ioSocket.on(eventName, callback);\r\n    }\r\n\r\n    once(eventName: string, callback: Function) {\r\n        this.ioSocket.once(eventName, callback);\r\n    }\r\n\r\n    connect() {\r\n        return this.ioSocket.connect();\r\n    }\r\n\r\n    disconnect(close?: any) {\r\n        return this.ioSocket.disconnect.apply(this.ioSocket, arguments);\r\n    }\r\n\r\n    emit(eventName: string, ...args: any[]) {\r\n        return this.ioSocket.emit.apply(this.ioSocket, arguments);\r\n    }\r\n\r\n    removeListener(eventName: string, callback?: Function) {\r\n        return this.ioSocket.removeListener.apply(this.ioSocket, arguments);\r\n    }\r\n\r\n    removeAllListeners(eventName?: string) {\r\n        return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);\r\n    }\r\n\r\n    fromEvent<T>(eventName: string): Observable<T> {\r\n        if (!this.subscribersCounter[eventName]) {\r\n            this.subscribersCounter[eventName] = 0;\r\n        }\r\n        this.subscribersCounter[eventName]++;\r\n\r\n        if (!this.eventObservables$[eventName]) {\r\n            this.eventObservables$[eventName] = new Observable((observer: any) => {\r\n                const listener = (data: T) => {\r\n                    observer.next(data);\r\n                };\r\n                 this.ioSocket.on(eventName, listener);\r\n                 return () => {\r\n                     this.subscribersCounter[eventName]--;\r\n                     if (this.subscribersCounter[eventName] === 0) {\r\n                        this.ioSocket.removeListener(eventName, listener);\r\n                        delete this.eventObservables$[eventName];\r\n                     }\r\n                };\r\n            }).pipe(\r\n                share()\r\n            );\r\n        }\r\n        return this.eventObservables$[eventName];\r\n    }\r\n\r\n    fromOneTimeEvent<T>(eventName: string): Promise<T> {\r\n        return new Promise<T>(resolve => this.once(eventName, resolve));\r\n    }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\r\nimport { SocketIoConfig } from './config/socket-io.config';\r\nimport { WrappedSocket } from './socket-io.service';\r\n\r\n/** Socket factory */\r\nexport function SocketFactory(config: SocketIoConfig) {\r\n    return new WrappedSocket(config);\r\n}\r\n\r\nexport const SOCKET_CONFIG_TOKEN = new InjectionToken<SocketIoConfig>('__SOCKET_IO_CONFIG__');\r\n\r\n@NgModule({})\r\nexport class SocketIoModule {\r\n    static forRoot(config: SocketIoConfig): ModuleWithProviders<SocketIoModule> {\r\n        return {\r\n            ngModule: SocketIoModule,\r\n            providers: [\r\n                { provide: SOCKET_CONFIG_TOKEN, useValue: config },\r\n                {\r\n                    provide: WrappedSocket,\r\n                    useFactory: SocketFactory,\r\n                    deps : [SOCKET_CONFIG_TOKEN]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n }\r\n"]}